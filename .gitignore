
import git
import os
import json
import pandas as pd
import pymysql
import requests
import streamlit as st
import plotly.express as px
from sqlalchemy import create_engine




#*************************************************************************************************************************************
st.set_page_config(page_title='PhonePe Pulse', page_icon=':bar_chart:', layout="wide")
st.markdown(f'<h1 style="text-align: center;">PhonePe Pulse Data Visualization \
            and Exploration</h1>', unsafe_allow_html=True)
            
st.subheader('Please select the option below:')
st.code('1 - Data Collection')
st.code('2 - Data Overview')
st.code('3 - Migrating Data to SQL Database')
st.code('4 - Data Insights and Exploration')
st.code('5 - Exit')

list_options = ['Select one', 'Data Collection', 'Data Overview',
                'Migrating Data to SQL Database', 'Data Insights and Exploration', 'Exit']
option = st.selectbox('', list_options)

#****************************************************************************************************************************************
def git_clone():
    try:
        git.Repo.clone_from("https://github.com/PhonePe/pulse.git", 'phonepe_pulse_git')
    except:
        current_directory = os.getcwd()
        st.success('already file exit and',f'the current working directory is: {current_directory}')
        
        

#********************************************************************************************************************************************        
def data_overview():

    st.write('')
    st.header('PhonePe Pulse Data: Insights for India')
    st.write('')

    st.subheader('Key Dimensions:')
    st.write('- State - All States in India')
    st.write('- Year -  2018 to 2023')
    st.write('- Quarter - Q1 (Jan to Mar), Q2 (Apr to June), Q3 (July to Sep), Q4 (Oct to Dec)')

    st.subheader('Aggregated Transaction:')
    st.write('Transaction data broken down by type of payments at state level.')
    st.write('- Recharge & bill payments')
    st.write('- Peer-to-peer payments')
    st.write('- Merchant payments')
    st.write('- Financial Services')
    st.write('- Others')

    st.subheader('Aggregated User:')
    st.write('Users data broken down by devices at state level.')
    
    st.subheader('Map Transaction:')
    st.write('- Total number of transactions at the state / district level.')
    st.write('- Total value of all transactions at the state / district level.')

    st.subheader('Map User:')
    st.write('- Total number of registered users at the state / district level.')
    st.write('- Total number of app opens by these registered users at the state / district level.')

    st.subheader('Top Transaction:')
    st.write('Explore the most number of the transactions happened for a selected Year-Quarter combination')
    st.write('- Top 10 States')
    st.write('- Top 10 Districts')
    st.write('- Top 10 Pincodes')

    st.subheader('Top User:')
    st.write('Explore the most number of registered users for a selected Year-Quarter combination')
    st.write('- Top 10 States')
    st.write('- Top 10 Districts')
    st.write('- Top 10 Pincodes')
#***********************************************************************************************************************************
    
def agg_transaction():
    path_agg_state="C:/Users/Dell/Documents/phonepe/pulse/data/aggregated/transaction/country/india/state/"
    agg_state_list = os.listdir(path_agg_state)
    coll1={'State':[], 'Year':[],'Quater':[],'Transacion_type':[], 'Transacion_count':[], 'Transacion_amount':[]}
    for i in agg_state_list:
        p_i=path_agg_state+i+"/"
        Agg_yr=os.listdir(p_i)
        for j in Agg_yr:
            p_j=p_i+j+"/"
            Agg_yr_list=os.listdir(p_j)
            for k in Agg_yr_list:
                p_k=p_j+k
                Data=open(p_k,'r')
                D=json.load(Data)
                for z in D['data']['transactionData']:
                  Name=z['name']
                  count=z['paymentInstruments'][0]['count']
                  amount=z['paymentInstruments'][0]['amount']
                  coll1['Transacion_type'].append(Name)
                  coll1['Transacion_count'].append(count)
                  coll1['Transacion_amount'].append(amount)
                  coll1['State'].append(i)
                  coll1['Year'].append(j)
                  coll1['Quater'].append(int(k.strip('.json')))
    #Succesfully created a dataframe
    df1=pd.DataFrame(coll1)
    df1['State'] =df1['State'].str.replace("andaman-&-nicobar-islands","Andaman & Nicobar")
    df1['State'] =df1['State'].str.replace("dadra-&-nagar-haveli-&-daman-&-diu", "Dadra and Nagar Haveli and Daman and Diu")
    df1['State'] =df1['State'].str.replace("-"," ")
    df1['State'] =df1['State'].str.title()
    return df1

### agg_user state extraction
def agg_user():
    path_agg_user_state = "C:/Users/Dell/Documents/phonepe/pulse/data/aggregated/user/country/india/state/"
    path_agg_user_state_list = os.listdir(path_agg_user_state)


    ### agg_user data of state extraction
    # agg_user year extraction
    coll2={'State':[],'Year':[],'Quatr':[],'Brand':[],'Percentage':[],'Count':[]}
    for state in path_agg_user_state_list:
        path_state = path_agg_user_state+state+"/"
        user_yr_list = os.listdir(path_state)

        for year in user_yr_list:
            path_year = path_state + year +"/"
            data_file = os.listdir(path_year)

            for file in data_file:
                path_file = path_year + file
                data = open(path_file,"r")
                D = json.load(data)

                try:
                    for i in D['data']['usersByDevice']:


                        brand = i["brand"]
                        percentage = i["percentage"]
                        count = i["count"]
                        coll2['State'].append(state)
                        coll2['Year'].append(year)
                        coll2['Quatr'].append(int(file.strip('.json')))
                        coll2['Brand'].append(brand)
                        coll2['Percentage'].append(percentage)
                        coll2['Count'].append(count)
                except:
                    pass


    df2=pd.DataFrame(coll2)
    df2['State'] =df2['State'].str.replace("andaman-&-nicobar-islands","Andaman & Nicobar")
    df2['State'] =df2['State'].str.replace("dadra-&-nagar-haveli-&-daman-&-diu", "Dadra and Nagar Haveli and Daman and Diu")
    df2['State'] =df2['State'].str.replace("-"," ")
    df2['State'] =df2['State'].str.title()
    return df2

def map_tran():
    path_map = "C:/Users/Dell/Documents/phonepe/pulse/data/map/transaction/hover/country/india/state/"
    map_state_list = os.listdir(path_map)


    coll3={'State':[],'Year':[],'Quatr':[],'DistrName':[],'Amount':[],'Count':[]}
    for state in map_state_list:
        path_state = path_map+state+"/"
        yr_list = os.listdir(path_state)

        for year in yr_list:
            path_year = path_state + year +"/"
            data_file = os.listdir(path_year)

            for file in data_file:
                path_file = path_year + file
                data = open(path_file,"r")
                D = json.load(data)
                #try:
                for i in D['data']["hoverDataList"]:
                    name= i["name"]
                    amount = i["metric"][0]["amount"]
                    count= i["metric"][0]["count"]
                    coll3['State'].append(state)
                    coll3['Year'].append(year)
                    coll3['Quatr'].append(int(file.strip('.json')))
                    coll3['DistrName'].append(name)
                    coll3['Amount'].append(amount)
                    coll3['Count'].append(count)
                #except:
                   # pass

    df3=pd.DataFrame(coll3)
    df3['State'] =df3['State'].str.replace("andaman-&-nicobar-islands","Andaman & Nicobar")
    df3['State'] =df3['State'].str.replace("dadra-&-nagar-haveli-&-daman-&-diu", "Dadra and Nagar Haveli and Daman and Diu")
    df3['State'] =df3['State'].str.replace("-"," ")
    df3['State'] =df3['State'].str.title()
    return df3

###  map user data extraction
def map_user():
    path_map_user = "C:/Users/Dell/Documents/phonepe/pulse/data/map/user/hover/country/india/state/"
    user_state_list = os.listdir(path_map_user)

    coll4={'State':[],'Year':[],'Quatr':[],"Distr_name":[],"Reg User":[],'App opens':[]}
    for state in user_state_list:
        path_state = path_map_user + state +"/"
        year_list = os.listdir(path_state)

        for year in year_list:
            path_year = path_state + year +"/"
            data_file = os.listdir(path_year)

            for file in data_file:
                path_file = path_year + file 
                data = open(path_file,"r")

                D = json.load(data)

                for i in D['data']['hoverData'].items():
                    district = i[0]
                    reg_user = i[1]['registeredUsers']
                    app_opens = i[1]['appOpens']
                    coll4["State"].append(state)
                    coll4["Year"].append(year)
                    coll4['Quatr'].append(int(file.strip('.json')))
                    coll4["Distr_name"].append(district)
                    coll4["Reg User"].append(reg_user)
                    coll4['App opens'].append(app_opens)

    df4 = pd.DataFrame(coll4)
    df4['State'] =df4['State'].str.replace("andaman-&-nicobar-islands","Andaman & Nicobar")
    df4['State'] =df4['State'].str.replace("dadra-&-nagar-haveli-&-daman-&-diu", "Dadra and Nagar Haveli and Daman and Diu")
    df4['State'] =df4['State'].str.replace("-"," ")
    df4['State'] =df4['State'].str.title()
    return df4

# top transaction data extraction
def top_tran():
    path_top_trans = "C:/Users/Dell/Documents/phonepe/pulse/data/top/transaction/country/india/state/"
    top_state_list = os.listdir(path_top_trans)

    coll5={'State':[],'Year':[],'Quatr':[],"Distr_name":[],"Count":[],'Amount':[]}
    for state in top_state_list:
        path_state = path_top_trans + state +"/"
        year_list = os.listdir(path_state)

        for year in year_list:
            path_year = path_state + year +"/"
            data_file = os.listdir(path_year)

            for file in data_file:
                path_file = path_year + file 
                data = open(path_file,"r")

                D = json.load(data)

                for i in D['data']['districts']:
                    district = i['entityName']
                    count = i['metric']['count']
                    amount = i['metric']['amount']
                    coll5["State"].append(state)
                    coll5["Year"].append(year)
                    coll5['Quatr'].append(int(file.strip('.json')))
                    coll5["Count"].append(count)
                    coll5["Distr_name"].append(district)
                    coll5['Amount'].append(amount)

    df5 = pd.DataFrame(coll5)
    df5['State'] =df5['State'].str.replace("andaman-&-nicobar-islands","Andaman & Nicobar")
    df5['State'] =df5['State'].str.replace("dadra-&-nagar-haveli-&-daman-&-diu", "Dadra and Nagar Haveli and Daman and Diu")
    df5['State'] =df5['State'].str.replace("-"," ")
    df5['State'] =df5['State'].str.title()
    return df5

## top user data extraction
def top_user():
    path_top_user = "C:/Users/Dell/Documents/phonepe/pulse/data/top/user/country/india/state/"
    top_state_list = os.listdir(path_top_user)

    coll6={'State':[],'Year':[],'Quatr':[],"Distr_name":[],"RegUser_dist":[],'Pincode':[],'RegUser_Pin':[]}
    for state in top_state_list:
        path_state = path_top_user + state +"/"
        year_list = os.listdir(path_state)

        for year in year_list:
            path_year = path_state + year +"/"
            data_file = os.listdir(path_year)

            for file in data_file:
                path_file = path_year + file 
                data = open(path_file,"r")

                D = json.load(data)
                for i in D['data']['districts']:
                    district = i['name']
                    reg_user = i['registeredUsers']
                    for j in D['data']['pincodes']:
                        pin_code = j['name']
                        reg_user = j['registeredUsers']
                        coll6["State"].append(state)
                        coll6["Year"].append(year)
                        coll6['Quatr'].append(int(file.strip('.json')))
                        coll6["RegUser_dist"].append( reg_user)
                        coll6["Distr_name"].append(district)
                        coll6['Pincode'].append(pin_code)
                        coll6['RegUser_Pin'].append(reg_user)

    df6 = pd.DataFrame(coll6)
    df6['State'] =df6['State'].str.replace("andaman-&-nicobar-islands","Andaman & Nicobar")
    df6['State'] =df6['State'].str.replace("dadra-&-nagar-haveli-&-daman-&-diu", "Dadra and Nagar Haveli and Daman and Diu")
    df6['State'] =df6['State'].str.replace("-"," ")
    df6['State'] =df6['State'].str.title()
    return df6 
#*******************************************************************************************************************************************
def data_collection():
    git_clone()
    agg_transaction()
    agg_user()
    map_tran()
    map_user()
    top_tran()
    top_user()
    
#**********************************************************************************************************************************************
def migrate_sql():
    mydb= pymysql.connect(
    host="localhost",
    user="root",
    password="kalai",
    autocommit=True,
    database="phonepe")
    cursor=mydb.cursor()
    engine = create_engine('mysql+pymysql://root:kalai@localhost/phonepe')
    try:
        df1 = agg_transaction()
        df1.to_sql('agg_trans', engine, if_exists='replace', index=False)
        df2 = agg_user()
        df2.to_sql('agg_user', engine, if_exists='replace', index=False)
        df3 = map_tran()
        df3.to_sql('map_tran', engine, if_exists='replace', index=False)
        df4 = map_user()
        df4.to_sql('map_user', engine, if_exists='replace', index=False)
        df5 = top_tran()
        df5.to_sql('top_tran', engine, if_exists='replace', index=False)
        df6 = top_user()
        df6.to_sql('top_user', engine, if_exists='replace', index=False)
        st.success('data migrated successfully')
    except:
        pass

#************************************************************************************************************************************************************





#*************************************************************************************************************************************************
if option:
    if option == 'Data Collection':
        data_collection()
        st.success('Data successfully cloned from the PhonePe Pulse Git repository')
        st.success('Data successfully collected')
    elif option == 'Data Overview':
        data_overview()
        
    elif option == 'Migrating Data to SQL Database':
        migrate_sql()
        st.success('Data successfully migrated')
        
    elif option == 'Exit':
        st.success('Thank you for your time. Exiting the application')
        
    elif option == 'Data Insights and Exploration':
        mydb= pymysql.connect(
        host="localhost",
        user="root",
        password="kalai",
        autocommit=True,
        database="phonepe")
        cursor=mydb.cursor()
        list_options=["BASIC INSIGHTS","Exploration"]
        option = st.selectbox('', list_options)
#*****************************************************************************************************************
        if option == "BASIC INSIGHTS":
            st.title("BASIC INSIGHTS")
            options = ["--select--",
                       "Top 10 states based on year and amount of transaction",
                       "Least 10 states based on type and amount of transaction",
                       "Top 10 mobile brands based on percentage of transaction",
                       "Top 10 Registered-users based on States and District(pincode)",
                       "Top 10 Districts based on states and amount of transaction",
                       "Least 10 Districts based on states and amount of transaction",
                       "Least 10 registered-users based on Districts and states",
                       "Top 10 transactions_type based on states and transaction_amount"]
            select = st.selectbox("Select the option",options)
            if select=="Top 10 states based on year and amount of transaction":
                mydb= pymysql.connect(
                host="localhost",
                user="root",
                password="kalai",
                autocommit=True,
                database="phonepe"
                )
                cursor=mydb.cursor()
                cursor.execute("select State, round(sum(amount)) as total_amount, year from top_tran group by state , year order by total_amount desc limit 10;")
                df = pd.DataFrame(cursor.fetchall(),columns=['state','total_amount','year'])
                col1,col2 = st.columns(2)
                with col1:
                    st.write(df)
                with col2:
                    st.title("Top 10 states based on year and amount of transaction")
                    fig = px.bar(df, x='state', y='total_amount', color='year', labels={'total_amount': 'Total Amount'})
                    st.plotly_chart(fig)
                    
            elif select=="Least 10 states based on type and amount of transaction":
                cursor.execute("select State, round(sum(transacion_amount)) as total_amount,transacion_type as type  from agg_trans group by state,transacion_type order by total_amount asc limit 10;")
                df = pd.DataFrame(cursor.fetchall(),columns=['state','total_amount','type'])
                col1,col2 = st.columns(2)
                with col1:
                    st.write(df)
                with col2:
                    st.title("Least 10 states based on type and amount of transaction")
                    fig = px.bar(df,x="type",y="total_amount",color='state')
                    st.plotly_chart(fig)
    
            elif select=="Top 10 mobile brands based on percentage of transaction":
                cursor.execute("select distinct brand,round(sum(percentage),2) as percentage from agg_user group by brand order by percentage desc limit 10;")
                df = pd.DataFrame(cursor.fetchall(),columns=['brand','percentage'])
                col1,col2 = st.columns(2)
                with col1:
                    st.write(df)
                with col2:
                    st.title("Top 10 mobile brands based on percentage of transaction")
                    fig=px.bar(df,x="brand",y="percentage",color='percentage')
                    st.plotly_chart(fig)
                    
            elif select=="Top 10 Registered-users based on States and District(pincode)":
                cursor.execute("select distinct state, sum(reguser_dist) AS registered_user, pincode from top_user group by state,pincode order by registered_user desc limit 10;")
                df = pd.DataFrame(cursor.fetchall(),columns=['state','registered_user','pincode'])
                col1,col2 = st.columns(2)
                with col1:
                    st.write(df)
                with col2:
                    st.title("Top 10 Registered-users based on States and District(pincode)")
                    fig=px.bar(df,x="state",y="registered_user",color='pincode')
                    st.plotly_chart(fig)
                    
            elif select=="Top 10 Districts based on states and amount of transaction":
                cursor.execute("select distinct state,distr_name as district, round(sum(amount)) as amount_transaction from top_tran group by state , district order by amount_transaction desc limit 10;")
                df = pd.DataFrame(cursor.fetchall(),columns=['state','district','amount_transaction'])
                col1,col2 = st.columns(2)
                with col1:
                    st.write(df)
                with col2:
                    st.title("Top 10 Districts based on states and amount of transaction")
                    fig=px.bar(df,x="district",y="amount_transaction",color='amount_transaction')
                    st.plotly_chart(fig)
                    
            elif select=="Least 10 Districts based on states and amount of transaction":
                 cursor.execute("select distinct state,distr_name as district, round(sum(amount)) as amount_transaction from top_tran group by state , district order by amount_transaction asc limit 10;")
                 df = pd.DataFrame(cursor.fetchall(),columns=['state','district','amount_transaction'])
                 col1,col2 = st.columns(2)
                 with col1:
                     st.write(df)
                 with col2:
                     st.title("Least 10 Districts based on states and amount of transaction")
                     fig=px.bar(df,x="district",y="amount_transaction",color='amount_transaction')
                     st.plotly_chart(fig)
        
            
        
            elif select=="Least 10 registered-users based on Districts and states":
                cursor.execute("select distinct state, sum(reguser_dist) AS registered_user, pincode from top_user group by state,pincode order by registered_user asc limit 10;")
                df = pd.DataFrame(cursor.fetchall(),columns=['state','registered_user','pincode'])
                col1,col2 = st.columns(2)
                with col1:
                    st.write(df)
                with col2:
                    st.title("Least 10 registered-users based on Districts and states")
                    fig=px.bar(df,x="state",y="registered_user",color='pincode')
                    st.plotly_chart(fig)
            
            elif select=="Top 10 transactions_type based on states and transaction_amount":
                cursor.execute("select distinct state,transacion_type as type, round(sum(transacion_amount)) as amount_transaction from agg_trans group by state , type order by amount_transaction desc limit 10;")
                df = pd.DataFrame(cursor.fetchall(),columns=['state','type','amount_transaction'])
                col1,col2 = st.columns(2)
                with col1:
                    st.write(df)
                with col2:
                    st.title("Top 10 transactions_type based on states and transaction_amount")
                    fig=px.bar(df,y="amount_transaction",x="type",color='state')
                    st.plotly_chart(fig)
#************************************************************************************************************************************8
        elif option == "Exploration":
            st.title("Exploration")
            
            col1, col2 = st.columns(2)
            
            with col1:
                Year = st.sidebar.slider("**Year**", min_value=2018, max_value=2022)
                Quarter = st.sidebar.slider("Quarter", min_value=1, max_value=4)
                Type = st.sidebar.selectbox("**Type**", ("Transactions", "Users"))
            with col2:
                pass 
            
                if Type == "Transactions":
                    #col1, col2 = st.columns(2)
                    # Overall State Data - TRANSACTIONS AMOUNT - INDIA MAP
                    #with col1:
                        
                    cursor.execute(f"select state, sum(count) as Number_transaction, round(sum(amount)) as Total from map_tran where year ={Year} and quatr = {Quarter} group by state order by Total")
                    
                    df1 = pd.DataFrame(cursor.fetchall(), columns=['state', 'Number_transaction', 'Total'])
    
                    fig = px.choropleth(df1,
                                        geojson="https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson",
                                        featureidkey='properties.ST_NM',
                                        locations='state',
                                        color='Total',
                                        title='Overall State Data - Transactions Amount',
                                        color_continuous_scale='sunset')
    
                    fig.update_geos(fitbounds="locations", visible=False)
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                
                   # with col2:
                        
                    cursor.execute(f"select state, sum(count) as Number_transaction, round(sum(amount)) as Total from map_tran where year ={Year} and quatr = {Quarter} group by state order by Total")
                    
                    df1 = pd.DataFrame(cursor.fetchall(), columns=['state', 'Number_transaction', 'Total'])
    
                    fig = px.choropleth(df1,
                                        geojson="https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson",
                                        featureidkey='properties.ST_NM',
                                        locations='state',
                                        color='Number_transaction',
                                        title='Overall State Data - Transactions Count',
                                        color_continuous_scale='sunset')
    
                    fig.update_geos(fitbounds="locations", visible=False)
                    st.plotly_chart(fig, use_container_width=True)
                    
                elif Type == "Users":
                    st.markdown("### :violet[Brands]")
                    cursor.execute(f"select brand as Brand, avg(percentage)*100 as Avg_Percentage,sum(count) as Total_Count from agg_user where year = {Year} and quatr = {Quarter} group by Brand ,quatr order by Avg_Percentage desc limit 10")
                    df = pd.DataFrame(cursor.fetchall(), columns=['Brand', 'Total_Count', 'Avg_Percentage'])
                    fig=px.bar(df,x='Brand',y='Total_Count',color='Avg_Percentage')
                    st.plotly_chart(fig)
                    #fig = px.pie(df,
                                 #names='Brand',
                                 #values='Avg_Percentage',
                                 #color='Brand',
                                 #labels={'Brand': 'Brand'},
                                 #hover_data=['Total_Count'],
                                 #color_discrete_sequence=px.colors.sequential.Agsunset,
                                 #title='Pie Chart of Total Count with Brand Colors Based on Avg Percentage')
                    #fig.update_traces(textposition='inside', textinfo='percent+label')
                    #st.plotly_chart(fig, use_container_width=True)
                    
                    
                    
                    st.markdown("### :violet[District]")
                    cursor.execute(f"select distr_name as District, sum(`Reg user`) as Reg_user from map_user where year = {Year} and quatr ={Quarter} group by  District order by Reg_user desc limit 10")
                    df = pd.DataFrame(cursor.fetchall(), columns=['District', 'Reg_user'])
                    df.Reg_user = df.Reg_user.astype(float)
                    fig = px.pie(df,
                                 names='District',
                                 values='Reg_user',
                                 color='District',
                                 labels={'District':'District'},
                                 hover_data=['Reg_user'],
                                 #color_discrete_sequence=px.colors.sequential.Agsunset,
                                 title='Pie Chart of District with Reg_user Colors Based on District')
                    fig.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig, use_container_width=True)
                    
                    
                    
                    st.markdown("### :violet[Pincode]")
                    cursor.execute(f"select pincode, sum(reguser_dist) as Total_Users from top_user where year ={Year} and quatr = {Quarter} group by pincode order by Total_Users desc limit 10")
                    df = pd.DataFrame(cursor.fetchall(), columns=['pincode', 'Total_Users'])
                    fig = px.pie(df,
                                 values='Total_Users',
                                 names='pincode',
                                 title='Top 10 district_ pincode',
                                 color_discrete_sequence=px.colors.sequential.Agsunset,
                                 labels={'pincode': 'pincode'},
                                 hover_data=['Total_Users'])
                    fig.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig, use_container_width=True)
                    
                    
                    st.markdown("### :violet[State]")
                    cursor.execute(f"select state, sum(`reg user`) as Total_Users from map_user where year = {Year} and quatr ={Quarter} group by state order by Total_Users desc limit 10")
                    df = pd.DataFrame(cursor.fetchall(), columns=['state', 'Total_Users'])
                    fig = px.pie(df, values='Total_Users',
                                 names='state',
                                 title='Top 10',
                                 color_discrete_sequence=px.colors.sequential.Agsunset,
                                 hover_data=['Total_Users'],
                                 labels={'Total_Users': 'Total_Users'})
    
                    fig.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig, use_container_width=True)
                    
 
    
     

       
                
    
        
        
        
        
        
        
        
        
        
        
